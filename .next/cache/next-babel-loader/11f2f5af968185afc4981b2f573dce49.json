{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport isEmpty from 'lodash/isEmpty';\nimport { FiSearch } from 'react-icons/fi';\nimport MapAutoComplete from 'components/Map/MapAutoComplete';\nimport { mapDataHelper } from 'components/Map/mapDataHelper';\nimport { NavbarSearchWrapper } from './Header.style';\nimport { SearchContext } from 'context/SearchProvider';\nimport { setStateToUrl } from 'library/helpers/url_handler';\n\nvar NavbarSearch = function NavbarSearch() {\n  var _useContext = useContext(SearchContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var initialState = {\n    amenities: state.amenities || [],\n    property: state.property || [],\n    setStartDate: state.setStartDate || null,\n    setEndDate: state.setEndDate || null,\n    minPrice: parseInt(state.minPrice) || 0,\n    maxPrice: parseInt(state.maxPrice) || 100,\n    location_lat: state.location_lat || null,\n    location_lng: state.location_lng || null,\n    room: parseInt(state.room) || 0,\n    guest: parseInt(state.guest) || 0\n  };\n\n  var updatevalueFunc = function updatevalueFunc(value) {\n    var searchedPlaceAPIData = value.searchedPlaceAPIData;\n    var tempLocation = [];\n    var mapData = !isEmpty(searchedPlaceAPIData) ? mapDataHelper(searchedPlaceAPIData) : [];\n\n    if (!isEmpty(mapData) && mapData.length !== 0) {\n      mapData.forEach(function (singleMapData) {\n        return tempLocation.push({\n          location_lat: singleMapData ? singleMapData.lat.toFixed(3) : null,\n          location_lng: singleMapData ? singleMapData.lng.toFixed(3) : null\n        });\n      });\n    }\n\n    var searchLocation = tempLocation ? tempLocation[0] : {};\n\n    if (!isEmpty(searchLocation)) {\n      var query = {\n        location_lat: parseFloat(searchLocation.location_lat),\n        location_lng: parseFloat(searchLocation.location_lng)\n      };\n      var params = setStateToUrl(query);\n      dispatch({\n        type: 'UPDATE',\n        payload: _objectSpread(_objectSpread({}, initialState), query)\n      });\n      Router.push({\n        pathname: '/listing',\n        query: params\n      });\n    }\n  };\n\n  return __jsx(NavbarSearchWrapper, {\n    className: \"navbar_search\"\n  }, __jsx(MapAutoComplete, {\n    updatevalue: function updatevalue(value) {\n      return updatevalueFunc(value);\n    }\n  }), __jsx(FiSearch, null));\n};\n\nexport default withRouter(NavbarSearch);","map":null,"metadata":{},"sourceType":"module"}