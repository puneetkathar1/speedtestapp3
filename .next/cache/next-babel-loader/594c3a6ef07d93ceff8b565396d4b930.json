{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport shuffle from 'lodash/shuffle';\n\nconst FetchAPIData = url => {\n  return fetch(url).then(r => r.json()).then(data => {\n    return data;\n  });\n};\n\nexport const ProcessAPIData = apiData => {\n  let fetchData = {};\n\n  if (apiData) {\n    apiData.forEach((item, key) => {\n      fetchData.data = item.data ? [...item.data] : [];\n      fetchData.name = item.name ? item.name : '';\n    });\n  }\n\n  const data = fetchData ? fetchData.data : [];\n  return data;\n};\nexport const SearchedData = processedData => {\n  const randNumber = Math.floor(Math.random() * 50 + 1);\n  const data = shuffle(processedData.slice(0, randNumber));\n  return data;\n};\nexport const SearchStateKeyCheck = state => {\n  for (var key in state) {\n    if (state[key] !== null && state[key] != '' && state[key] != [] && state[key] != 0 && state[key] != 100) {\n      return true;\n    }\n  }\n\n  return false;\n};\nexport const Paginator = (posts, processedData, limit) => {\n  return [...posts, ...processedData.slice(posts.length, posts.length + limit)];\n};\n\nconst GetAPIData = async apiUrl => {\n  const promises = apiUrl.map(async repo => {\n    const apiPath = `${process.env.SERVER_API}/static/data`; // read it from env variable\n\n    const api = `${apiPath}/${repo.endpoint}.json`;\n    const response = await FetchAPIData(api);\n    return {\n      name: repo.name,\n      data: response\n    };\n  });\n  const receviedData = await Promise.all(promises);\n  return receviedData;\n};\n\nexport default GetAPIData;","map":null,"metadata":{},"sourceType":"module"}