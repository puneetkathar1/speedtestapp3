{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport Portal from '../Portal/Portal';\nimport { Wrapper, Container } from './ViewWithPopup.style';\nimport { useOnClickOutside } from './useOnClickOutside';\nexport default function ViewWithPopup(_ref) {\n  var view = _ref.view,\n      popup = _ref.popup,\n      _ref$noView = _ref.noView,\n      noView = _ref$noView === void 0 ? false : _ref$noView,\n      style = _ref.style,\n      className = _ref.className;\n\n  var _useState = useState(false),\n      showPopup = _useState[0],\n      setShowPopup = _useState[1];\n\n  var ref = useRef();\n  useOnClickOutside(ref, function () {\n    return setShowPopup(false);\n  }); // Add all classs to an array\n\n  var addAllClasses = ['view_with__popup']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(Wrapper, {\n    className: \"\".concat(addAllClasses.join(' '), \" \").concat(showPopup ? 'active' : ''),\n    ref: ref\n  }, view && noView && __jsx(\"div\", {\n    className: \"popup_handler\",\n    onClick: function onClick() {\n      return setShowPopup(!showPopup);\n    }\n  }, view), __jsx(Container, {\n    className: \"popup_container\",\n    showPopup: showPopup,\n    onClick: function onClick() {\n      return setShowPopup(true);\n    },\n    style: style\n  }, view && !noView && view, showPopup && __jsx(\"div\", {\n    id: \"popup\"\n  }, __jsx(Portal, {\n    rendererId: \"popup\"\n  }, popup && popup))));\n}","map":null,"metadata":{},"sourceType":"module"}