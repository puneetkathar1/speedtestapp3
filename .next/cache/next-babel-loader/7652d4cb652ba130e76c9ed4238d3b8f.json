{"ast":null,"code":"import _Input from \"antd/lib/input\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useRef } from 'react';\nimport _ from 'lodash';\nimport { Marker } from 'react-google-maps';\nimport MapWrapper from './MapWrapper';\nimport makerImage from './hotelMapMarker.png';\n\nconst {\n  SearchBox\n} = require('react-google-maps/lib/components/places/SearchBox');\n\nconst MapWithSearchBox = props => {\n  const {\n    0: dragNDropData,\n    1: setDragNDropData\n  } = useState([]);\n  const {\n    updatevalue,\n    name\n  } = props;\n  const {\n    0: locationInput,\n    1: setLocationInput\n  } = useState({\n    searchedLocation: ''\n  });\n  const {\n    0: locationDetails,\n    1: setLocationDetails\n  } = useState({\n    center: {\n      lat: 40.7128,\n      lng: -74.006\n    },\n    markers: [{\n      position: {\n        lat: 40.7128,\n        lng: -74.006\n      }\n    }],\n    places: []\n  }); // const googleMapRef = useRef(null);\n\n  const SearchBoxRef = useRef(null);\n\n  const onPlacesChanged = () => {\n    const places = SearchBoxRef.current.getPlaces();\n    const bounds = new window.google.maps.LatLngBounds();\n    places.forEach(place => {\n      if (place.geometry.viewport) {\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    const nextMarkers = places.map(place => ({\n      position: place.geometry.location\n    }));\n\n    const nextCenter = _.get(nextMarkers, '0.position', locationDetails.center);\n\n    setLocationDetails({\n      places,\n      center: nextCenter,\n      markers: nextMarkers\n    });\n    setLocationInput({\n      searchedLocation: places && places[0] && places[0].formatted_address\n    });\n    updatevalue(places);\n  };\n\n  const handleOnChange = event => {\n    event.stopPropagation();\n\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n  };\n\n  const handleOnPressEnter = event => {\n    event.stopPropagation();\n\n    if (event.which === '13') {\n      event.preventDefault();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n  };\n\n  const onDragEndFunc = marker => {\n    let tempLocArray = [];\n    var geocoder = new window.google.maps.Geocoder();\n    const latlng = {\n      lat: Number(marker.latLng.lat().toFixed(4)),\n      lng: Number(marker.latLng.lng().toFixed(4))\n    };\n    setLocationDetails(_objectSpread(_objectSpread({}, locationDetails), {}, {\n      center: latlng\n    }));\n    geocoder.geocode({\n      latLng: latlng\n    }, function (results, status) {\n      console.log(results, 'results');\n\n      if (results[0] && results[0].formatted_address) {\n        setLocationInput({\n          searchedLocation: results[0] && results[0].formatted_address\n        });\n        const location = {\n          place_id: results[0].place_id,\n          formatted_address: results[0].formatted_address,\n          address_components: results[0].address_components,\n          geometry: results[0].geometry\n        };\n        tempLocArray.push(location);\n      }\n\n      setDragNDropData(tempLocArray);\n    });\n    updatevalue(dragNDropData);\n  };\n\n  return __jsx(MapWrapper, {\n    containerElement: __jsx(\"div\", {\n      style: {\n        height: '400px'\n      }\n    }),\n    mapElement: __jsx(\"div\", {\n      style: {\n        height: '100%'\n      }\n    }),\n    defaultZoom: 15,\n    center: locationDetails.center\n  }, __jsx(SearchBox, {\n    ref: SearchBoxRef,\n    controlPosition: window.google.maps.ControlPosition.TOP_LEFT,\n    onPlacesChanged: onPlacesChanged\n  }, __jsx(_Input, {\n    type: \"text\",\n    name: name,\n    placeholder: \"Enter your hotel location\",\n    style: {\n      boxSizing: `border-box`,\n      border: `1px solid transparent`,\n      width: `260px`,\n      height: `40px`,\n      marginTop: `10px`,\n      padding: `0 12px`,\n      borderRadius: `2px`,\n      boxShadow: `0 3px 6px rgba(0, 0, 0, 0.16)`,\n      fontSize: `15px`,\n      outline: `none`,\n      textOverflow: `ellipses`\n    },\n    defaultValue: \"\",\n    value: locationInput ? locationInput.searchedLocation : '',\n    onChange: handleOnChange,\n    onPressEnter: handleOnPressEnter\n  })), locationDetails.markers.map((marker, index) => {\n    return __jsx(Marker, {\n      icon: makerImage,\n      key: index,\n      position: marker.position,\n      onDragEnd: marker => onDragEndFunc(marker)\n    });\n  }));\n};\n\nexport default MapWithSearchBox;","map":null,"metadata":{},"sourceType":"module"}