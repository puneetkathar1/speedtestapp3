{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Puneet\\\\Documents\\\\trip-main\\\\container\\\\Layout\\\\Header\\\\NavbarSearch.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport isEmpty from 'lodash/isEmpty';\nimport { FiSearch } from 'react-icons/fi';\nimport MapAutoComplete from 'components/Map/MapAutoComplete';\nimport { mapDataHelper } from 'components/Map/mapDataHelper';\nimport { NavbarSearchWrapper } from './Header.style';\nimport { SearchContext } from 'context/SearchProvider';\nimport { setStateToUrl } from 'library/helpers/url_handler';\n\nvar NavbarSearch = function NavbarSearch() {\n  _s();\n\n  var _useContext = useContext(SearchContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var initialState = {\n    amenities: state.amenities || [],\n    property: state.property || [],\n    setStartDate: state.setStartDate || null,\n    setEndDate: state.setEndDate || null,\n    minPrice: parseInt(state.minPrice) || 0,\n    maxPrice: parseInt(state.maxPrice) || 100,\n    location_lat: state.location_lat || null,\n    location_lng: state.location_lng || null,\n    room: parseInt(state.room) || 0,\n    guest: parseInt(state.guest) || 0\n  };\n\n  var updatevalueFunc = function updatevalueFunc(value) {\n    var searchedPlaceAPIData = value.searchedPlaceAPIData;\n    var tempLocation = [];\n    var mapData = !isEmpty(searchedPlaceAPIData) ? mapDataHelper(searchedPlaceAPIData) : [];\n\n    if (!isEmpty(mapData) && mapData.length !== 0) {\n      mapData.forEach(function (singleMapData) {\n        return tempLocation.push({\n          location_lat: singleMapData ? singleMapData.lat.toFixed(3) : null,\n          location_lng: singleMapData ? singleMapData.lng.toFixed(3) : null\n        });\n      });\n    }\n\n    var searchLocation = tempLocation ? tempLocation[0] : {};\n\n    if (!isEmpty(searchLocation)) {\n      var query = {\n        location_lat: parseFloat(searchLocation.location_lat),\n        location_lng: parseFloat(searchLocation.location_lng)\n      };\n      var params = setStateToUrl(query);\n      dispatch({\n        type: 'UPDATE',\n        payload: _objectSpread(_objectSpread({}, initialState), query)\n      });\n      Router.push({\n        pathname: '/listing',\n        query: params\n      });\n    }\n  };\n\n  return __jsx(NavbarSearchWrapper, {\n    className: \"navbar_search\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, __jsx(MapAutoComplete, {\n    updatevalue: function updatevalue(value) {\n      return updatevalueFunc(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), __jsx(FiSearch, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(NavbarSearch, \"QMdo+h1+fLbTriZQ0QN6uukzyow=\");\n\n_c = NavbarSearch;\nexport default _c2 = withRouter(NavbarSearch);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NavbarSearch\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Puneet/Documents/trip-main/container/Layout/Header/NavbarSearch.js"],"names":["React","useContext","Router","withRouter","isEmpty","FiSearch","MapAutoComplete","mapDataHelper","NavbarSearchWrapper","SearchContext","setStateToUrl","NavbarSearch","state","dispatch","initialState","amenities","property","setStartDate","setEndDate","minPrice","parseInt","maxPrice","location_lat","location_lng","room","guest","updatevalueFunc","value","searchedPlaceAPIData","tempLocation","mapData","length","forEach","singleMapData","push","lat","toFixed","lng","searchLocation","query","parseFloat","params","type","payload","pathname"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,aAAnC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,aAAT,QAA8B,6BAA9B;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA;;AACzB,oBAA4BV,UAAU,CAACQ,aAAD,CAAtC;AAAA,MAAQG,KAAR,eAAQA,KAAR;AAAA,MAAeC,QAAf,eAAeA,QAAf;;AACA,MAAMC,YAAY,GAAG;AACnBC,IAAAA,SAAS,EAAEH,KAAK,CAACG,SAAN,IAAmB,EADX;AAEnBC,IAAAA,QAAQ,EAAEJ,KAAK,CAACI,QAAN,IAAkB,EAFT;AAGnBC,IAAAA,YAAY,EAAEL,KAAK,CAACK,YAAN,IAAsB,IAHjB;AAInBC,IAAAA,UAAU,EAAEN,KAAK,CAACM,UAAN,IAAoB,IAJb;AAKnBC,IAAAA,QAAQ,EAAEC,QAAQ,CAACR,KAAK,CAACO,QAAP,CAAR,IAA4B,CALnB;AAMnBE,IAAAA,QAAQ,EAAED,QAAQ,CAACR,KAAK,CAACS,QAAP,CAAR,IAA4B,GANnB;AAOnBC,IAAAA,YAAY,EAAEV,KAAK,CAACU,YAAN,IAAsB,IAPjB;AAQnBC,IAAAA,YAAY,EAAEX,KAAK,CAACW,YAAN,IAAsB,IARjB;AASnBC,IAAAA,IAAI,EAAEJ,QAAQ,CAACR,KAAK,CAACY,IAAP,CAAR,IAAwB,CATX;AAUnBC,IAAAA,KAAK,EAAEL,QAAQ,CAACR,KAAK,CAACa,KAAP,CAAR,IAAyB;AAVb,GAArB;;AAaA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,QAAQC,oBAAR,GAAiCD,KAAjC,CAAQC,oBAAR;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAMC,OAAO,GAAG,CAAC1B,OAAO,CAACwB,oBAAD,CAAR,GACZrB,aAAa,CAACqB,oBAAD,CADD,GAEZ,EAFJ;;AAGA,QAAI,CAACxB,OAAO,CAAC0B,OAAD,CAAR,IAAqBA,OAAO,CAACC,MAAR,KAAmB,CAA5C,EAA+C;AAC7CD,MAAAA,OAAO,CAACE,OAAR,CAAgB,UAACC,aAAD;AAAA,eACdJ,YAAY,CAACK,IAAb,CAAkB;AAChBZ,UAAAA,YAAY,EAAEW,aAAa,GAAGA,aAAa,CAACE,GAAd,CAAkBC,OAAlB,CAA0B,CAA1B,CAAH,GAAkC,IAD7C;AAEhBb,UAAAA,YAAY,EAAEU,aAAa,GAAGA,aAAa,CAACI,GAAd,CAAkBD,OAAlB,CAA0B,CAA1B,CAAH,GAAkC;AAF7C,SAAlB,CADc;AAAA,OAAhB;AAMD;;AAED,QAAME,cAAc,GAAGT,YAAY,GAAGA,YAAY,CAAC,CAAD,CAAf,GAAqB,EAAxD;;AACA,QAAI,CAACzB,OAAO,CAACkC,cAAD,CAAZ,EAA8B;AAC5B,UAAMC,KAAK,GAAG;AACZjB,QAAAA,YAAY,EAAEkB,UAAU,CAACF,cAAc,CAAChB,YAAhB,CADZ;AAEZC,QAAAA,YAAY,EAAEiB,UAAU,CAACF,cAAc,CAACf,YAAhB;AAFZ,OAAd;AAIA,UAAMkB,MAAM,GAAG/B,aAAa,CAAC6B,KAAD,CAA5B;AACA1B,MAAAA,QAAQ,CAAC;AACP6B,QAAAA,IAAI,EAAE,QADC;AAEPC,QAAAA,OAAO,kCACF7B,YADE,GAEFyB,KAFE;AAFA,OAAD,CAAR;AAOArC,MAAAA,MAAM,CAACgC,IAAP,CAAY;AACVU,QAAAA,QAAQ,EAAE,UADA;AAEVL,QAAAA,KAAK,EAAEE;AAFG,OAAZ;AAID;AACF,GAlCD;;AAoCA,SACE,MAAC,mBAAD;AAAqB,IAAA,SAAS,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD;AAAiB,IAAA,WAAW,EAAE,qBAACd,KAAD;AAAA,aAAWD,eAAe,CAACC,KAAD,CAA1B;AAAA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAzDD;;GAAMhB,Y;;KAAAA,Y;AA2DN,qBAAeR,UAAU,CAACQ,YAAD,CAAzB","sourcesContent":["import React, { useContext } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport isEmpty from 'lodash/isEmpty';\nimport { FiSearch } from 'react-icons/fi';\nimport MapAutoComplete from 'components/Map/MapAutoComplete';\nimport { mapDataHelper } from 'components/Map/mapDataHelper';\nimport { NavbarSearchWrapper } from './Header.style';\nimport { SearchContext } from 'context/SearchProvider';\nimport { setStateToUrl } from 'library/helpers/url_handler';\n\nconst NavbarSearch = () => {\n  const { state, dispatch } = useContext(SearchContext);\n  const initialState = {\n    amenities: state.amenities || [],\n    property: state.property || [],\n    setStartDate: state.setStartDate || null,\n    setEndDate: state.setEndDate || null,\n    minPrice: parseInt(state.minPrice) || 0,\n    maxPrice: parseInt(state.maxPrice) || 100,\n    location_lat: state.location_lat || null,\n    location_lng: state.location_lng || null,\n    room: parseInt(state.room) || 0,\n    guest: parseInt(state.guest) || 0,\n  };\n\n  const updatevalueFunc = (value) => {\n    const { searchedPlaceAPIData } = value;\n    let tempLocation = [];\n    const mapData = !isEmpty(searchedPlaceAPIData)\n      ? mapDataHelper(searchedPlaceAPIData)\n      : [];\n    if (!isEmpty(mapData) && mapData.length !== 0) {\n      mapData.forEach((singleMapData) =>\n        tempLocation.push({\n          location_lat: singleMapData ? singleMapData.lat.toFixed(3) : null,\n          location_lng: singleMapData ? singleMapData.lng.toFixed(3) : null,\n        })\n      );\n    }\n\n    const searchLocation = tempLocation ? tempLocation[0] : {};\n    if (!isEmpty(searchLocation)) {\n      const query = {\n        location_lat: parseFloat(searchLocation.location_lat),\n        location_lng: parseFloat(searchLocation.location_lng),\n      };\n      const params = setStateToUrl(query);\n      dispatch({\n        type: 'UPDATE',\n        payload: {\n          ...initialState,\n          ...query,\n        },\n      });\n      Router.push({\n        pathname: '/listing',\n        query: params,\n      });\n    }\n  };\n\n  return (\n    <NavbarSearchWrapper className=\"navbar_search\">\n      <MapAutoComplete updatevalue={(value) => updatevalueFunc(value)} />\n      <FiSearch />\n    </NavbarSearchWrapper>\n  );\n};\n\nexport default withRouter(NavbarSearch);\n"]},"metadata":{},"sourceType":"module"}