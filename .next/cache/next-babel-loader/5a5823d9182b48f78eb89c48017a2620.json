{"ast":null,"code":"import _Input from \"antd/lib/input\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport { compose, withProps } from 'recompose';\nimport { withScriptjs } from 'react-google-maps';\nimport StandaloneSearchBox from 'react-google-maps/lib/components/places/StandaloneSearchBox';\nconst SearchInput = compose(withProps({\n  googleMapURL: process.env.REACT_APP_GOOGLE_MAP_API_KEY,\n  loadingElement: __jsx(\"div\", {\n    style: {\n      height: '100%'\n    }\n  }),\n  containerElement: __jsx(\"div\", {\n    style: {\n      height: `400px`\n    }\n  })\n}), withScriptjs)(props => {\n  const {\n    getinputvalue\n  } = props;\n  const {\n    0: locationInput,\n    1: setLocationInput\n  } = useState({\n    searchedLocation: '',\n    searchedPlaceAPIData: []\n  });\n\n  const handleOnChange = event => {\n    if (event.which === '13') {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n  };\n\n  const refs = useRef({});\n\n  const onPlacesChanged = () => {\n    const places = refs.current.getPlaces();\n    setLocationInput({\n      searchedLocation: places && places[0] && places[0].formatted_address,\n      searchedPlaceAPIData: places ? places : []\n    });\n    getinputvalue({\n      searchedLocation: places && places[0] && places[0].formatted_address,\n      searchedPlaceAPIData: places ? places : []\n    });\n  };\n\n  const handleOnPressEnter = event => {\n    if (event.which === '13') {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n    getinputvalue(locationInput);\n  };\n\n  return __jsx(\"div\", {\n    className: \"map_autocomplete\"\n  }, __jsx(StandaloneSearchBox, {\n    ref: refs,\n    onPlacesChanged: onPlacesChanged\n  }, __jsx(_Input, {\n    type: \"text\",\n    defaultValue: \"\",\n    value: locationInput.searchedLocation || '',\n    placeholder: \"Search \\u201CThailand, Asia\\u201D\",\n    size: \"large\",\n    onChange: handleOnChange,\n    onPressEnter: handleOnPressEnter\n  })));\n});\n\nconst MapAutoComplete = props => {\n  const {\n    updatevalue\n  } = props;\n  return __jsx(SearchInput, {\n    getinputvalue: updatevalue\n  });\n};\n\nexport default MapAutoComplete;","map":null,"metadata":{},"sourceType":"module"}