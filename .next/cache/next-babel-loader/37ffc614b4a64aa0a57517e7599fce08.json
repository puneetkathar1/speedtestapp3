{"ast":null,"code":"import _Input from \"antd/lib/input\";\nvar _jsxFileName = \"C:\\\\Users\\\\Puneet\\\\Documents\\\\trip-main\\\\components\\\\Map\\\\MapAutoComplete.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport { compose, withProps } from 'recompose';\nimport { withScriptjs } from 'react-google-maps';\nimport StandaloneSearchBox from 'react-google-maps/lib/components/places/StandaloneSearchBox';\nconst SearchInput = compose(withProps({\n  googleMapURL: process.env.REACT_APP_GOOGLE_MAP_API_KEY,\n  loadingElement: __jsx(\"div\", {\n    style: {\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 21\n    }\n  }),\n  containerElement: __jsx(\"div\", {\n    style: {\n      height: `400px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 23\n    }\n  })\n}), withScriptjs)(props => {\n  const {\n    getinputvalue\n  } = props;\n  const {\n    0: locationInput,\n    1: setLocationInput\n  } = useState({\n    searchedLocation: '',\n    searchedPlaceAPIData: []\n  });\n\n  const handleOnChange = event => {\n    if (event.which === '13') {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n  };\n\n  const refs = useRef({});\n\n  const onPlacesChanged = () => {\n    const places = refs.current.getPlaces();\n    setLocationInput({\n      searchedLocation: places && places[0] && places[0].formatted_address,\n      searchedPlaceAPIData: places ? places : []\n    });\n    getinputvalue({\n      searchedLocation: places && places[0] && places[0].formatted_address,\n      searchedPlaceAPIData: places ? places : []\n    });\n  };\n\n  const handleOnPressEnter = event => {\n    if (event.which === '13') {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setLocationInput({\n      searchedLocation: event.target.value\n    });\n    getinputvalue(locationInput);\n  };\n\n  return __jsx(\"div\", {\n    className: \"map_autocomplete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(StandaloneSearchBox, {\n    ref: refs,\n    onPlacesChanged: onPlacesChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(_Input, {\n    type: \"text\",\n    defaultValue: \"\",\n    value: locationInput.searchedLocation || '',\n    placeholder: \"Search \\u201CThailand, Asia\\u201D\",\n    size: \"large\",\n    onChange: handleOnChange,\n    onPressEnter: handleOnPressEnter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })));\n});\n\nconst MapAutoComplete = props => {\n  const {\n    updatevalue\n  } = props;\n  return __jsx(SearchInput, {\n    getinputvalue: updatevalue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default MapAutoComplete;","map":{"version":3,"sources":["C:/Users/Puneet/Documents/trip-main/components/Map/MapAutoComplete.js"],"names":["React","useState","useRef","compose","withProps","withScriptjs","StandaloneSearchBox","SearchInput","googleMapURL","process","env","REACT_APP_GOOGLE_MAP_API_KEY","loadingElement","height","containerElement","props","getinputvalue","locationInput","setLocationInput","searchedLocation","searchedPlaceAPIData","handleOnChange","event","which","preventDefault","stopPropagation","target","value","refs","onPlacesChanged","places","current","getPlaces","formatted_address","handleOnPressEnter","MapAutoComplete","updatevalue"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,WAAnC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,mBAAP,MAAgC,6DAAhC;AAGA,MAAMC,WAAW,GAAGJ,OAAO,CACzBC,SAAS,CAAC;AACRI,EAAAA,YAAY,EAAEC,OAAO,CAACC,GAAR,CAAYC,4BADlB;AAERC,EAAAA,cAAc,EAAE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR;AAGRC,EAAAA,gBAAgB,EAAE;AAAK,IAAA,KAAK,EAAE;AAAED,MAAAA,MAAM,EAAG;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHV,CAAD,CADgB,EAMzBR,YANyB,CAAP,CAOjBU,KAAD,IAAW;AACX,QAAM;AAAEC,IAAAA;AAAF,MAAoBD,KAA1B;AACA,QAAM;AAAA,OAACE,aAAD;AAAA,OAAgBC;AAAhB,MAAoCjB,QAAQ,CAAC;AACjDkB,IAAAA,gBAAgB,EAAE,EAD+B;AAEjDC,IAAAA,oBAAoB,EAAE;AAF2B,GAAD,CAAlD;;AAIA,QAAMC,cAAc,GAAIC,KAAD,IAAW;AAChC,QAAIA,KAAK,CAACC,KAAN,KAAgB,IAApB,EAA0B;AACxBD,MAAAA,KAAK,CAACE,cAAN;AACAF,MAAAA,KAAK,CAACG,eAAN;AACD;;AACDP,IAAAA,gBAAgB,CAAC;AACfC,MAAAA,gBAAgB,EAAEG,KAAK,CAACI,MAAN,CAAaC;AADhB,KAAD,CAAhB;AAGD,GARD;;AASA,QAAMC,IAAI,GAAG1B,MAAM,CAAC,EAAD,CAAnB;;AACA,QAAM2B,eAAe,GAAG,MAAM;AAC5B,UAAMC,MAAM,GAAGF,IAAI,CAACG,OAAL,CAAaC,SAAb,EAAf;AACAd,IAAAA,gBAAgB,CAAC;AACfC,MAAAA,gBAAgB,EAAEW,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAhB,IAAuBA,MAAM,CAAC,CAAD,CAAN,CAAUG,iBADpC;AAEfb,MAAAA,oBAAoB,EAAEU,MAAM,GAAGA,MAAH,GAAY;AAFzB,KAAD,CAAhB;AAIAd,IAAAA,aAAa,CAAC;AACZG,MAAAA,gBAAgB,EAAEW,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAhB,IAAuBA,MAAM,CAAC,CAAD,CAAN,CAAUG,iBADvC;AAEZb,MAAAA,oBAAoB,EAAEU,MAAM,GAAGA,MAAH,GAAY;AAF5B,KAAD,CAAb;AAID,GAVD;;AAYA,QAAMI,kBAAkB,GAAIZ,KAAD,IAAW;AACpC,QAAIA,KAAK,CAACC,KAAN,KAAgB,IAApB,EAA0B;AACxBD,MAAAA,KAAK,CAACE,cAAN;AACAF,MAAAA,KAAK,CAACG,eAAN;AACD;;AACDP,IAAAA,gBAAgB,CAAC;AAAEC,MAAAA,gBAAgB,EAAEG,KAAK,CAACI,MAAN,CAAaC;AAAjC,KAAD,CAAhB;AACAX,IAAAA,aAAa,CAACC,aAAD,CAAb;AACD,GAPD;;AASA,SACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD;AAAqB,IAAA,GAAG,EAAEW,IAA1B;AAAgC,IAAA,eAAe,EAAEC,eAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,YAAY,EAAC,EAFf;AAGE,IAAA,KAAK,EAAEZ,aAAa,CAACE,gBAAd,IAAkC,EAH3C;AAIE,IAAA,WAAW,EAAC,mCAJd;AAKE,IAAA,IAAI,EAAC,OALP;AAME,IAAA,QAAQ,EAAEE,cANZ;AAOE,IAAA,YAAY,EAAEa,kBAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAeD,CA3DmB,CAApB;;AA6DA,MAAMC,eAAe,GAAIpB,KAAD,IAAW;AACjC,QAAM;AAAEqB,IAAAA;AAAF,MAAkBrB,KAAxB;AACA,SAAO,MAAC,WAAD;AAAa,IAAA,aAAa,EAAEqB,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAHD;;AAKA,eAAeD,eAAf","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { compose, withProps } from 'recompose';\nimport { withScriptjs } from 'react-google-maps';\nimport StandaloneSearchBox from 'react-google-maps/lib/components/places/StandaloneSearchBox';\nimport { Input } from 'antd';\n\nconst SearchInput = compose(\n  withProps({\n    googleMapURL: process.env.REACT_APP_GOOGLE_MAP_API_KEY,\n    loadingElement: <div style={{ height: '100%' }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n  }),\n  withScriptjs\n)((props) => {\n  const { getinputvalue } = props;\n  const [locationInput, setLocationInput] = useState({\n    searchedLocation: '',\n    searchedPlaceAPIData: [],\n  });\n  const handleOnChange = (event) => {\n    if (event.which === '13') {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    setLocationInput({\n      searchedLocation: event.target.value,\n    });\n  };\n  const refs = useRef({});\n  const onPlacesChanged = () => {\n    const places = refs.current.getPlaces();\n    setLocationInput({\n      searchedLocation: places && places[0] && places[0].formatted_address,\n      searchedPlaceAPIData: places ? places : [],\n    });\n    getinputvalue({\n      searchedLocation: places && places[0] && places[0].formatted_address,\n      searchedPlaceAPIData: places ? places : [],\n    });\n  };\n\n  const handleOnPressEnter = (event) => {\n    if (event.which === '13') {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    setLocationInput({ searchedLocation: event.target.value });\n    getinputvalue(locationInput);\n  };\n\n  return (\n    <div className=\"map_autocomplete\">\n      <StandaloneSearchBox ref={refs} onPlacesChanged={onPlacesChanged}>\n        <Input\n          type=\"text\"\n          defaultValue=\"\"\n          value={locationInput.searchedLocation || ''}\n          placeholder=\"Search “Thailand, Asia”\"\n          size=\"large\"\n          onChange={handleOnChange}\n          onPressEnter={handleOnPressEnter}\n        />\n      </StandaloneSearchBox>\n    </div>\n  );\n});\n\nconst MapAutoComplete = (props) => {\n  const { updatevalue } = props;\n  return <SearchInput getinputvalue={updatevalue} />;\n};\n\nexport default MapAutoComplete;\n"]},"metadata":{},"sourceType":"module"}