{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport fetch from 'isomorphic-unfetch';\nimport shuffle from 'lodash/shuffle';\n\nvar FetchAPIData = function FetchAPIData(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  }).then(function (data) {\n    return data;\n  });\n};\n\nexport var ProcessAPIData = function ProcessAPIData(apiData) {\n  var fetchData = {};\n\n  if (apiData) {\n    apiData.forEach(function (item, key) {\n      fetchData.data = item.data ? _toConsumableArray(item.data) : [];\n      fetchData.name = item.name ? item.name : '';\n    });\n  }\n\n  var data = fetchData ? fetchData.data : [];\n  return data;\n};\nexport var SearchedData = function SearchedData(processedData) {\n  var randNumber = Math.floor(Math.random() * 50 + 1);\n  var data = shuffle(processedData.slice(0, randNumber));\n  return data;\n};\nexport var SearchStateKeyCheck = function SearchStateKeyCheck(state) {\n  for (var key in state) {\n    if (state[key] !== null && state[key] != '' && state[key] != [] && state[key] != 0 && state[key] != 100) {\n      return true;\n    }\n  }\n\n  return false;\n};\nexport var Paginator = function Paginator(posts, processedData, limit) {\n  return [].concat(_toConsumableArray(posts), _toConsumableArray(processedData.slice(posts.length, posts.length + limit)));\n};\n\nvar GetAPIData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(apiUrl) {\n    var promises, receviedData;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            promises = apiUrl.map( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(repo) {\n                var apiPath, api, response;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        apiPath = \"\".concat(process.env.SERVER_API, \"/static/data\"); // read it from env variable\n\n                        api = \"\".concat(apiPath, \"/\").concat(repo.endpoint, \".json\");\n                        _context.next = 4;\n                        return FetchAPIData(api);\n\n                      case 4:\n                        response = _context.sent;\n                        return _context.abrupt(\"return\", {\n                          name: repo.name,\n                          data: response\n                        });\n\n                      case 6:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n            _context2.next = 3;\n            return Promise.all(promises);\n\n          case 3:\n            receviedData = _context2.sent;\n            return _context2.abrupt(\"return\", receviedData);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function GetAPIData(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default GetAPIData;","map":null,"metadata":{},"sourceType":"module"}