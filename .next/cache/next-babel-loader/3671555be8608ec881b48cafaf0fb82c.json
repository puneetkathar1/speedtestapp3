{"ast":null,"code":"import _Button from \"antd/lib/button\";\nimport _Row from \"antd/lib/row\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport _Col from \"antd/lib/col\";\nimport _Input from \"antd/lib/input\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useStateMachine } from 'little-state-machine';\nimport { useForm, Controller } from 'react-hook-form';\nimport InputIncDec from 'components/UI/InputIncDec/InputIncDec';\nimport FormControl from 'components/UI/FormControl/FormControl';\nimport AddListingAction from './AddListingAction';\nimport { FormHeader, Title, FormContent, FormAction } from './AddListing.style';\n\nvar BasicInformation = function BasicInformation(_ref) {\n  var _errors$pricePerNight, _errors$pricePerNight2;\n\n  var setStep = _ref.setStep;\n\n  var _useStateMachine = useStateMachine(AddListingAction),\n      action = _useStateMachine.action,\n      state = _useStateMachine.state;\n\n  var _useForm = useForm(),\n      control = _useForm.control,\n      register = _useForm.register,\n      errors = _useForm.errors,\n      setValue = _useForm.setValue,\n      handleSubmit = _useForm.handleSubmit;\n\n  var _useState = useState({\n    guest: 0,\n    bed: 0\n  }),\n      quantity = _useState[0],\n      setQuantity = _useState[1];\n\n  useEffect(function () {\n    register({\n      name: 'guest'\n    }, {\n      required: true\n    });\n    register({\n      name: 'bed'\n    }, {\n      required: true\n    });\n  }, [register]);\n\n  var handleOnChange = function handleOnChange(key) {\n    return function (event) {\n      setQuantity(_objectSpread(_objectSpread({}, quantity), {}, _defineProperty({}, key, event.target.value)));\n      setValue([key], event.target.value);\n    };\n  };\n\n  var handleIncrement = function handleIncrement(key) {\n    setQuantity(_objectSpread(_objectSpread({}, quantity), {}, _defineProperty({}, key, ++quantity[key])));\n    setValue([key], ++quantity[key]);\n  };\n\n  var handleDecrement = function handleDecrement(key) {\n    if (quantity[key] <= 0) {\n      return false;\n    }\n\n    setQuantity(_objectSpread(_objectSpread({}, quantity), {}, _defineProperty({}, key, --quantity[key])));\n    setValue([key], --quantity[key]);\n  };\n\n  var onSubmit = function onSubmit(data) {\n    action(data);\n    setStep(2);\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(FormContent, null, __jsx(FormHeader, null, __jsx(Title, null, \"Step 1: Start with the basics\")), __jsx(_Row, {\n    gutter: 30\n  }, __jsx(_Col, {\n    sm: 12\n  }, __jsx(FormControl, {\n    label: \"Hotel Name\",\n    htmlFor: \"hotelName\",\n    error: errors.hotelName && __jsx(\"span\", null, \"This field is required!\")\n  }, __jsx(Controller, {\n    as: __jsx(_Input, null),\n    id: \"hotelName\",\n    name: \"hotelName\",\n    defaultValue: state.data.hotelName,\n    control: control,\n    placeholder: \"Write your hotel name here\",\n    rules: {\n      required: true\n    }\n  }))), __jsx(_Col, {\n    sm: 12\n  }, __jsx(FormControl, {\n    label: \"Price Per Night (USD)\",\n    htmlFor: \"pricePerNight\",\n    error: errors.pricePerNight && __jsx(React.Fragment, null, ((_errors$pricePerNight = errors.pricePerNight) === null || _errors$pricePerNight === void 0 ? void 0 : _errors$pricePerNight.type) === 'required' && __jsx(\"span\", null, \"This field is required!\"), ((_errors$pricePerNight2 = errors.pricePerNight) === null || _errors$pricePerNight2 === void 0 ? void 0 : _errors$pricePerNight2.type) === 'pattern' && __jsx(\"span\", null, \"Please enter only number!\"))\n  }, __jsx(Controller, {\n    as: __jsx(_InputNumber, null),\n    id: \"pricePerNight\",\n    name: \"pricePerNight\",\n    defaultValue: state.data.pricePerNight,\n    control: control,\n    placeholder: \"00.00\",\n    rules: {\n      required: true,\n      pattern: /^[0-9]*$/\n    }\n  })))), __jsx(FormControl, {\n    label: \"Hotel Description\",\n    htmlFor: \"hotelDescription\",\n    error: errors.hotelDescription && __jsx(\"span\", null, \"This field is required!\")\n  }, __jsx(Controller, {\n    as: __jsx(_Input.TextArea, {\n      rows: 5\n    }),\n    id: \"hotelDescription\",\n    name: \"hotelDescription\",\n    defaultValue: state.data.hotelDescription,\n    control: control,\n    placeholder: \"Tell people about your hotel, room, location & amenities\",\n    rules: {\n      required: true\n    }\n  })), __jsx(FormControl, {\n    label: \"How many guests can your hotel accommodate?\",\n    error: errors.guest && __jsx(\"span\", null, \"This field is required!\")\n  }, __jsx(InputIncDec, {\n    name: \"guest\",\n    value: quantity.guest,\n    onChange: handleOnChange('guest'),\n    increment: function increment() {\n      return handleIncrement('guest');\n    },\n    decrement: function decrement() {\n      return handleDecrement('guest');\n    }\n  })), __jsx(FormControl, {\n    label: \"How many beds can guests use?\",\n    error: errors.bed && __jsx(\"span\", null, \"This field is required!\")\n  }, __jsx(InputIncDec, {\n    name: \"bed\",\n    value: quantity.bed,\n    onChange: handleOnChange('bed'),\n    increment: function increment() {\n      return handleIncrement('bed');\n    },\n    decrement: function decrement() {\n      return handleDecrement('bed');\n    }\n  }))), __jsx(FormAction, null, __jsx(\"div\", {\n    className: \"inner-wrapper\"\n  }, __jsx(_Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"Next\"))));\n};\n\nexport default BasicInformation;","map":null,"metadata":{},"sourceType":"module"}