{"ast":null,"code":"import _Slider from \"antd/lib/slider\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport _Button from \"antd/lib/button\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext, useReducer } from 'react';\nimport moment from 'moment';\nimport { createBrowserHistory } from 'history';\nimport ViewWithPopup from 'components/UI/ViewWithPopup/ViewWithPopup';\nimport InputIncDec from 'components/UI/InputIncDec/InputIncDec';\nimport DateRangePickerBox from 'components/UI/DatePicker/ReactDates';\nimport { SearchContext } from 'context/SearchProvider';\nimport { setStateToUrl } from 'library/helpers/url_handler';\nimport { priceInit, calenderItem, getAmenities, getPropertyType } from '../SearchParams';\nimport CategroySearchWrapper, { RoomGuestWrapper, ItemWrapper, ActionWrapper } from './CategorySearch.style';\nvar history = true ? createBrowserHistory() : false;\nvar location = true && window.location;\n\nfunction serchReducer(state, action) {\n  switch (action.type) {\n    case 'amenities':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        amenities: action.payload\n      });\n\n    case 'property':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        property: action.payload\n      });\n\n    case 'date_range':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        setStartDate: action.payload.setStartDate,\n        setEndDate: action.payload.setEndDate\n      });\n\n    case 'price':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        minPrice: action.payload.minPrice,\n        maxPrice: action.payload.maxPrice\n      });\n\n    case 'roomGuestReset':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        room: action.payload.room,\n        guest: action.payload.guest\n      });\n\n    case 'reset':\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return state;\n  }\n}\n\nvar CategorySearchNext = function CategorySearchNext(props) {\n  var _useContext = useContext(SearchContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var initialState = {\n    amenities: state.amenities || [],\n    property: state.property || [],\n    setStartDate: state.setStartDate || null,\n    setEndDate: state.setEndDate || null,\n    minPrice: parseInt(state.minPrice) || 0,\n    maxPrice: parseInt(state.maxPrice) || 100,\n    location_lat: state.location_lat || null,\n    location_lng: state.location_lng || null,\n    room: parseInt(state.room) || 0,\n    guest: parseInt(state.guest) || 0\n  }; // current component state with dispatching to reducer\n\n  var _useReducer = useReducer(serchReducer, initialState),\n      current = _useReducer[0],\n      dispatchCurrent = _useReducer[1]; // Room guest state\n\n\n  var _useState = useState(current.room),\n      countRoom = _useState[0],\n      setRoom = _useState[1];\n\n  var _useState2 = useState(current.guest),\n      countGuest = _useState2[0],\n      setGuest = _useState2[1]; // data handling\n\n\n  var _onChange = function onChange(value, type) {\n    var query = {};\n    var modifiedCurrent = current;\n\n    for (var key in modifiedCurrent) {\n      if (modifiedCurrent.hasOwnProperty(key)) {\n        switch (key) {\n          case 'date_range':\n            delete modifiedCurrent.date_range;\n            break;\n\n          case 'price':\n            delete modifiedCurrent.price;\n            break;\n        }\n      }\n    }\n\n    if (type === 'date_range') {\n      query = _objectSpread(_objectSpread({}, current), {}, {\n        setStartDate: value.setStartDate,\n        setEndDate: value.setEndDate\n      });\n      dispatchCurrent({\n        type: type,\n        payload: value\n      });\n    } else if (type === 'price') {\n      query = _objectSpread(_objectSpread({}, current), {}, {\n        minPrice: value ? value[0] : 0,\n        maxPrice: value ? value[1] : 100\n      });\n      dispatchCurrent({\n        type: type,\n        payload: query\n      });\n    } else if (type === 'reset') {\n      setRoom(0);\n      setGuest(0);\n      query = _objectSpread(_objectSpread({}, current), {}, {\n        setStartDate: null,\n        setEndDate: null,\n        room: 0,\n        guest: 0,\n        amenities: [],\n        property: [],\n        minPrice: 0,\n        maxPrice: 100,\n        location_lat: null,\n        location_lng: null\n      });\n      dispatchCurrent({\n        type: type,\n        payload: query\n      });\n    } else {\n      query = _objectSpread(_objectSpread({}, current), {}, _defineProperty({}, type, value));\n      dispatchCurrent({\n        type: type,\n        payload: value\n      });\n    }\n\n    var params = setStateToUrl(query);\n    dispatch({\n      type: 'UPDATE',\n      payload: _objectSpread(_objectSpread({}, current), query)\n    });\n    history.push(_objectSpread(_objectSpread({}, location), {}, {\n      search: params\n    }));\n  };\n\n  var handleRoomGuestApply = function handleRoomGuestApply() {\n    var query = _objectSpread(_objectSpread({}, current), {}, {\n      room: countRoom,\n      guest: countGuest\n    });\n\n    var params = setStateToUrl(query);\n    history.push(_objectSpread(_objectSpread({}, location), {}, {\n      search: params\n    }));\n  };\n\n  var handleRoomGuestCancel = function handleRoomGuestCancel() {\n    setRoom(0);\n    setGuest(0);\n\n    var query = _objectSpread(_objectSpread({}, current), {}, {\n      room: 0,\n      guest: 0\n    });\n\n    dispatchCurrent({\n      type: 'roomGuestReset',\n      payload: query\n    });\n    var params = setStateToUrl(query);\n    history.push(_objectSpread(_objectSpread({}, location), {}, {\n      search: params\n    }));\n  };\n\n  var dateRangeActivateClass = current && current.setStartDate !== undefined && current.setEndDate !== undefined && current.setStartDate !== null && current.setEndDate !== null ? 'activated' : '';\n  var priceRangeActivateClass = current && current.minPrice !== undefined && current.maxPrice !== undefined && current.minPrice === 0 && current.maxPrice === 100 ? '' : 'activated';\n  var amenitiesLength = 0;\n  var propertyLength = 0;\n  var amenities = [];\n  var property = [];\n\n  if (current && current.amenities && typeof current.amenities === 'string') {\n    amenities = current.amenities.split(',');\n    amenitiesLength = amenities.length;\n  } else if (current && current.amenities && current.amenities.length) {\n    amenities = current.amenities;\n    amenitiesLength = amenities.length;\n  }\n\n  if (current && current.property && typeof current.property === 'string') {\n    property = current.property.split(',');\n    propertyLength = property.length;\n  } else if (current && current.property && current.property.length) {\n    property = current.property;\n    propertyLength = current.property.length;\n  }\n\n  return __jsx(CategroySearchWrapper, null, __jsx(ViewWithPopup, {\n    className: amenitiesLength ? 'activated' : '',\n    key: getAmenities.id,\n    noView: true,\n    view: __jsx(_Button, {\n      type: \"default\"\n    }, getAmenities.name, amenitiesLength > 0 && \": \".concat(amenitiesLength)),\n    popup: __jsx(_Checkbox.Group, {\n      options: getAmenities.options,\n      defaultValue: amenities,\n      onChange: function onChange(value) {\n        return _onChange(value, 'amenities');\n      }\n    })\n  }), __jsx(ViewWithPopup, {\n    className: propertyLength ? 'activated' : '',\n    key: getPropertyType.id,\n    noView: true,\n    view: __jsx(_Button, {\n      type: \"default\"\n    }, getPropertyType.name, propertyLength > 0 && \": \".concat(propertyLength)),\n    popup: __jsx(_Checkbox.Group, {\n      options: getPropertyType.options,\n      defaultValue: property,\n      onChange: function onChange(value) {\n        return _onChange(value, 'property');\n      }\n    })\n  }), __jsx(ViewWithPopup, {\n    className: dateRangeActivateClass,\n    key: 400,\n    noView: true,\n    view: __jsx(_Button, {\n      type: \"default\"\n    }, \"Choose Date\"),\n    popup: __jsx(DateRangePickerBox, {\n      startDateId: \"startDate-id-category\",\n      endDateId: \"endDate-id-category\",\n      startDate: current.setStartDate ? moment(current.setStartDate) : null,\n      endDate: current.setEndDate ? moment(current.setEndDate) : null,\n      numberOfMonths: 1,\n      small: true,\n      item: calenderItem,\n      updateSearchData: function updateSearchData(value) {\n        return _onChange(value, 'date_range');\n      }\n    })\n  }), __jsx(ViewWithPopup, {\n    className: priceRangeActivateClass,\n    key: 300,\n    noView: true,\n    view: __jsx(_Button, {\n      type: \"default\"\n    }, current.minPrice > 0 || current.maxPrice < 100 ? \"Price Range: \".concat(current.minPrice, \", \").concat(current.maxPrice) : \"Price per night\"),\n    popup: __jsx(_Slider, {\n      range: true,\n      marks: priceInit,\n      min: 0,\n      max: 100,\n      defaultValue: [current.minPrice, current.maxPrice],\n      onAfterChange: function onAfterChange(value) {\n        return _onChange(value, 'price');\n      }\n    })\n  }), __jsx(ViewWithPopup, {\n    key: 200,\n    noView: true,\n    className: countRoom || countGuest ? 'activated' : '',\n    view: __jsx(_Button, {\n      type: \"default\"\n    }, \"Room \", countRoom > 0 && \": \".concat(countRoom), \", Guest\", countGuest > 0 && \": \".concat(countGuest)),\n    popup: __jsx(RoomGuestWrapper, null, __jsx(ItemWrapper, null, __jsx(\"strong\", null, \"Room\"), __jsx(InputIncDec, {\n      id: \"room\",\n      increment: function increment() {\n        return setRoom(function (countRoom) {\n          return countRoom + 1;\n        });\n      },\n      decrement: function decrement() {\n        return setRoom(function (countRoom) {\n          return countRoom > 0 && countRoom - 1;\n        });\n      },\n      onChange: function onChange(e) {\n        return setRoom(e.target.value);\n      },\n      value: countRoom\n    })), __jsx(ItemWrapper, null, __jsx(\"strong\", null, \"Guest\"), __jsx(InputIncDec, {\n      id: \"guest\",\n      increment: function increment() {\n        return setGuest(function (countGuest) {\n          return countGuest + 1;\n        });\n      },\n      decrement: function decrement() {\n        return setGuest(function (countGuest) {\n          return countGuest > 0 && countGuest - 1;\n        });\n      },\n      onChange: function onChange(e) {\n        return setGuest(e.target.value);\n      },\n      value: countGuest\n    })), __jsx(ActionWrapper, null, countRoom || countGuest ? __jsx(_Button, {\n      type: \"default\",\n      onClick: handleRoomGuestCancel\n    }, \"Cancel\") : '', __jsx(_Button, {\n      type: \"primary\",\n      onClick: handleRoomGuestApply\n    }, \"Apply\")))\n  }), __jsx(ViewWithPopup, {\n    key: 100,\n    noView: true,\n    view: __jsx(_Button, {\n      type: \"default\"\n    }, \"Reset\"),\n    popup: __jsx(_Button, {\n      onClick: function onClick() {\n        return _onChange(initialState, 'reset');\n      }\n    }, \"Reset Search Page URL\")\n  }));\n};\n\nexport default CategorySearchNext;","map":null,"metadata":{},"sourceType":"module"}