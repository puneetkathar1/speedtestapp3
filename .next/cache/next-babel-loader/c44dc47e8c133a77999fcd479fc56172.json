{"ast":null,"code":"import _Button from \"antd/lib/button\";\nimport _Switch from \"antd/lib/switch\";\nimport _Input from \"antd/lib/input\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport Link from 'next/link';\nimport { useForm, Controller } from 'react-hook-form';\nimport { MdLockOpen } from 'react-icons/md';\nimport FormControl from 'components/UI/FormControl/FormControl';\nimport { AuthContext } from 'context/AuthProvider';\nimport { FORGET_PASSWORD_PAGE } from 'settings/constant';\nimport { FieldWrapper, SwitchWrapper, Label } from '../Auth.style';\n\nconst SignInForm = () => {\n  var _errors$email, _errors$email2, _errors$password, _errors$password2, _errors$password3;\n\n  const {\n    signIn\n  } = useContext(AuthContext);\n  const {\n    control,\n    errors,\n    handleSubmit\n  } = useForm();\n\n  const onSubmit = data => {\n    signIn(data);\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(FormControl, {\n    label: \"Email\",\n    htmlFor: \"email\",\n    error: errors.email && __jsx(React.Fragment, null, ((_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.type) === 'required' && __jsx(\"span\", null, \"This field is required!\"), ((_errors$email2 = errors.email) === null || _errors$email2 === void 0 ? void 0 : _errors$email2.type) === 'pattern' && __jsx(\"span\", null, \"Please enter a valid email address!\"))\n  }, __jsx(Controller, {\n    as: __jsx(_Input, null),\n    type: \"email\",\n    id: \"email\",\n    name: \"email\",\n    defaultValue: \"\",\n    control: control,\n    rules: {\n      required: true,\n      pattern: /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/\n    }\n  })), __jsx(FormControl, {\n    label: \"Password\",\n    htmlFor: \"password\",\n    error: errors.password && __jsx(React.Fragment, null, ((_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.type) === 'required' && __jsx(\"span\", null, \"This field is required!\"), ((_errors$password2 = errors.password) === null || _errors$password2 === void 0 ? void 0 : _errors$password2.type) === 'minLength' && __jsx(\"span\", null, \"Password must be at lest 6 characters!\"), ((_errors$password3 = errors.password) === null || _errors$password3 === void 0 ? void 0 : _errors$password3.type) === 'maxLength' && __jsx(\"span\", null, \"Password must not be longer than 20 characters!\"))\n  }, __jsx(Controller, {\n    as: __jsx(_Input.Password, null),\n    defaultValue: \"\",\n    control: control,\n    id: \"password\",\n    name: \"password\",\n    rules: {\n      required: true,\n      minLength: 6,\n      maxLength: 20\n    }\n  })), __jsx(FieldWrapper, null, __jsx(SwitchWrapper, null, __jsx(Controller, {\n    as: __jsx(_Switch, null),\n    name: \"rememberMe\",\n    defaultValue: false,\n    valueName: \"checked\",\n    control: control\n  }), __jsx(Label, null, \"Remember Me\")), __jsx(Link, {\n    href: FORGET_PASSWORD_PAGE\n  }, __jsx(\"a\", null, \"Forget Password ?\"))), __jsx(_Button, {\n    className: \"signin-btn\",\n    type: \"primary\",\n    htmlType: \"submit\",\n    size: \"large\",\n    style: {\n      width: '100%'\n    }\n  }, __jsx(MdLockOpen, null), \"Login\"));\n};\n\nexport default SignInForm;","map":null,"metadata":{},"sourceType":"module"}