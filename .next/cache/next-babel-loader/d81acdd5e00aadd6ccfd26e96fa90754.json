{"ast":null,"code":"import _Checkbox from \"antd/lib/checkbox\";\nvar _jsxFileName = \"C:\\\\Users\\\\Puneet\\\\Documents\\\\trip-main\\\\pages\\\\listing.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useContext } from 'react';\nimport Head from 'next/head';\nimport dynamic from 'next/dynamic';\nimport Sticky from 'react-stickynode';\nimport Toolbar from 'components/UI/Toolbar/Toolbar';\nimport CategorySearch from 'container/Listing/Search/CategorySearch/CategorySearch';\nimport SectionGrid from 'components/SectionGrid/SectionGrid';\nimport { PostPlaceholder } from 'components/UI/ContentLoader/ContentLoader';\nimport ListingMap from 'container/Listing/ListingMap';\nimport { SearchContext } from 'context/SearchProvider';\nimport GetAPIData, { Paginator, SearchedData, SearchStateKeyCheck, ProcessAPIData } from 'library/helpers/get_api_data';\nimport { getDeviceType } from 'library/helpers/get_device_type';\nimport { SINGLE_POST_PAGE } from 'settings/constant';\nimport { LISTING_PAGE_POST_LIMIT, LISTING_PAGE_COLUMN_WIDTH_WITHOUT_MAP, LISTING_PAGE_COLUMN_WIDTH_WITH_MAP } from 'settings/config';\nimport ListingWrapper, { PostsWrapper, ShowMapCheckbox } from 'container/Listing/Listing.style';\nconst FilterDrawer = dynamic(() => import('container/Listing/Search/MobileSearchView'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('container/Listing/Search/MobileSearchView')],\n    modules: ['container/Listing/Search/MobileSearchView']\n  }\n});\nexport default function ListingPage({\n  processedData,\n  deviceType\n}) {\n  const {\n    state,\n    dispatch\n  } = useContext(SearchContext);\n  const statekey = SearchStateKeyCheck(state);\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(processedData.slice(0, LISTING_PAGE_POST_LIMIT) || []);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: showMap,\n    1: setShowMap\n  } = useState(false);\n  useEffect(() => {\n    if (statekey === true) {\n      const newData = SearchedData(processedData);\n      setPosts(newData);\n    } else {\n      setPosts(processedData.slice(0, LISTING_PAGE_POST_LIMIT) || []);\n    }\n  }, [statekey]);\n\n  const handleMapToggle = () => {\n    setShowMap(showMap => !showMap);\n  };\n\n  const handleLoadMore = () => {\n    setLoading(true);\n    setTimeout(() => {\n      const data = Paginator(posts, processedData, LISTING_PAGE_POST_LIMIT);\n      setPosts(data);\n      setLoading(false);\n    }, 1000);\n  };\n\n  let columnWidth = LISTING_PAGE_COLUMN_WIDTH_WITHOUT_MAP;\n\n  if (showMap) {\n    columnWidth = LISTING_PAGE_COLUMN_WIDTH_WITH_MAP;\n  }\n\n  let columnCount = 'col-24';\n\n  if (deviceType === 'desktop' && showMap === true) {\n    columnCount = 'col-12';\n  }\n\n  return __jsx(ListingWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"Listing | A react next listing template\")), __jsx(Sticky, {\n    top: 82,\n    innerZ: 999,\n    activeClass: \"isHeaderSticky\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, __jsx(Toolbar, {\n    left: deviceType === 'desktop' ? __jsx(CategorySearch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 40\n      }\n    }) : __jsx(FilterDrawer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 61\n      }\n    }),\n    right: __jsx(ShowMapCheckbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, __jsx(_Checkbox, {\n      defaultChecked: false,\n      onChange: handleMapToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, \"Show map\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  })), __jsx(PostsWrapper, {\n    className: columnCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, __jsx(SectionGrid, {\n    link: SINGLE_POST_PAGE,\n    columnWidth: columnWidth,\n    deviceType: deviceType,\n    data: posts,\n    totalItem: processedData.length,\n    limit: LISTING_PAGE_POST_LIMIT,\n    loading: loading,\n    handleLoadMore: handleLoadMore,\n    placeholder: __jsx(PostPlaceholder, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 24\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  })), showMap && __jsx(ListingMap, {\n    loading: loading,\n    mapData: posts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }\n  }));\n}\nexport async function getServerSideProps(context) {\n  const {\n    req\n  } = context;\n  const apiUrl = [{\n    endpoint: 'hotel',\n    name: 'listingHotel'\n  }];\n  const pageData = await GetAPIData(apiUrl);\n  const processedData = ProcessAPIData(pageData);\n  const deviceType = getDeviceType(req);\n  return {\n    props: {\n      processedData,\n      deviceType\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Puneet/Documents/trip-main/pages/listing.js"],"names":["useState","useEffect","useContext","Head","dynamic","Sticky","Toolbar","CategorySearch","SectionGrid","PostPlaceholder","ListingMap","SearchContext","GetAPIData","Paginator","SearchedData","SearchStateKeyCheck","ProcessAPIData","getDeviceType","SINGLE_POST_PAGE","LISTING_PAGE_POST_LIMIT","LISTING_PAGE_COLUMN_WIDTH_WITHOUT_MAP","LISTING_PAGE_COLUMN_WIDTH_WITH_MAP","ListingWrapper","PostsWrapper","ShowMapCheckbox","FilterDrawer","ListingPage","processedData","deviceType","state","dispatch","statekey","posts","setPosts","slice","loading","setLoading","showMap","setShowMap","newData","handleMapToggle","handleLoadMore","setTimeout","data","columnWidth","columnCount","length","getServerSideProps","context","req","apiUrl","endpoint","name","pageData","props"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext } from 'react';\nimport Head from 'next/head';\nimport dynamic from 'next/dynamic';\nimport Sticky from 'react-stickynode';\nimport Toolbar from 'components/UI/Toolbar/Toolbar';\nimport CategorySearch from 'container/Listing/Search/CategorySearch/CategorySearch';\nimport { Checkbox } from 'antd';\nimport SectionGrid from 'components/SectionGrid/SectionGrid';\nimport { PostPlaceholder } from 'components/UI/ContentLoader/ContentLoader';\nimport ListingMap from 'container/Listing/ListingMap';\nimport { SearchContext } from 'context/SearchProvider';\nimport GetAPIData, {\n  Paginator,\n  SearchedData,\n  SearchStateKeyCheck,\n  ProcessAPIData,\n} from 'library/helpers/get_api_data';\nimport { getDeviceType } from 'library/helpers/get_device_type';\nimport { SINGLE_POST_PAGE } from 'settings/constant';\nimport {\n  LISTING_PAGE_POST_LIMIT,\n  LISTING_PAGE_COLUMN_WIDTH_WITHOUT_MAP,\n  LISTING_PAGE_COLUMN_WIDTH_WITH_MAP,\n} from 'settings/config';\nimport ListingWrapper, {\n  PostsWrapper,\n  ShowMapCheckbox,\n} from 'container/Listing/Listing.style';\n\nconst FilterDrawer = dynamic(() =>\n  import('container/Listing/Search/MobileSearchView')\n);\n\nexport default function ListingPage({ processedData, deviceType }) {\n  const { state, dispatch } = useContext(SearchContext);\n  const statekey = SearchStateKeyCheck(state);\n  const [posts, setPosts] = useState(\n    processedData.slice(0, LISTING_PAGE_POST_LIMIT) || []\n  );\n  const [loading, setLoading] = useState(false);\n  const [showMap, setShowMap] = useState(false);\n\n  useEffect(() => {\n    if (statekey === true) {\n      const newData = SearchedData(processedData);\n      setPosts(newData);\n    } else {\n      setPosts(processedData.slice(0, LISTING_PAGE_POST_LIMIT) || []);\n    }\n  }, [statekey]);\n\n  const handleMapToggle = () => {\n    setShowMap((showMap) => !showMap);\n  };\n\n  const handleLoadMore = () => {\n    setLoading(true);\n    setTimeout(() => {\n      const data = Paginator(posts, processedData, LISTING_PAGE_POST_LIMIT);\n      setPosts(data);\n      setLoading(false);\n    }, 1000);\n  };\n\n  let columnWidth = LISTING_PAGE_COLUMN_WIDTH_WITHOUT_MAP;\n  if (showMap) {\n    columnWidth = LISTING_PAGE_COLUMN_WIDTH_WITH_MAP;\n  }\n\n  let columnCount = 'col-24';\n  if (deviceType === 'desktop' && showMap === true) {\n    columnCount = 'col-12';\n  }\n\n  return (\n    <ListingWrapper>\n      <Head>\n        <title>Listing | A react next listing template</title>\n      </Head>\n\n      <Sticky top={82} innerZ={999} activeClass=\"isHeaderSticky\">\n        <Toolbar\n          left={\n            deviceType === 'desktop' ? <CategorySearch /> : <FilterDrawer />\n          }\n          right={\n            <ShowMapCheckbox>\n              <Checkbox defaultChecked={false} onChange={handleMapToggle}>\n                Show map\n              </Checkbox>\n            </ShowMapCheckbox>\n          }\n        />\n      </Sticky>\n\n      <PostsWrapper className={columnCount}>\n        <SectionGrid\n          link={SINGLE_POST_PAGE}\n          columnWidth={columnWidth}\n          deviceType={deviceType}\n          data={posts}\n          totalItem={processedData.length}\n          limit={LISTING_PAGE_POST_LIMIT}\n          loading={loading}\n          handleLoadMore={handleLoadMore}\n          placeholder={<PostPlaceholder />}\n        />\n      </PostsWrapper>\n      {showMap && <ListingMap loading={loading} mapData={posts} />}\n    </ListingWrapper>\n  );\n}\n\nexport async function getServerSideProps(context) {\n  const { req } = context;\n  const apiUrl = [\n    {\n      endpoint: 'hotel',\n      name: 'listingHotel',\n    },\n  ];\n  const pageData = await GetAPIData(apiUrl);\n  const processedData = ProcessAPIData(pageData);\n  const deviceType = getDeviceType(req);\n  return {\n    props: { processedData, deviceType },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}