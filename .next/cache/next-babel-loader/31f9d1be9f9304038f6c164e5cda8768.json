{"ast":null,"code":"import _Drawer from \"antd/lib/drawer\";\nimport _Slider from \"antd/lib/slider\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport _Button from \"antd/lib/button\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext, useReducer } from 'react';\nimport moment from 'moment';\nimport { createBrowserHistory } from 'history';\nimport Heading from 'components/UI/Heading/Heading';\nimport InputIncDec from 'components/UI/InputIncDec/InputIncDec';\nimport DateRangePicker from 'components/UI/DatePicker/ReactDates';\nimport { setStateToUrl } from 'library/helpers/url_handler';\nimport { SearchContext } from 'context/SearchProvider';\nimport { IoIosArrowDown } from 'react-icons/io';\nimport { Accordion, AccordionItem, AccordionItemHeading, AccordionItemButton, AccordionItemPanel } from 'react-accessible-accordion';\nimport { priceInit, calenderItem, getAmenities, getPropertyType } from './SearchParams';\nimport { FilterArea, FilterElementsWrapper, ButtonGroup, RoomGuestWrapper, ItemWrapper } from './MobileSearchView.style';\nconst history = false ? createBrowserHistory() : false;\nconst location = false && window.location;\n\nfunction serchReducer(state, action) {\n  switch (action.type) {\n    case 'amenities':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        amenities: action.payload\n      });\n\n    case 'property':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        property: action.payload\n      });\n\n    case 'date_range':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        setStartDate: action.payload.setStartDate,\n        setEndDate: action.payload.setEndDate\n      });\n\n    case 'price':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        minPrice: action.payload.minPrice,\n        maxPrice: action.payload.maxPrice\n      });\n\n    case 'room':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        room: action.payload.room\n      });\n\n    case 'guest':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        guest: action.payload.guest\n      });\n\n    case 'reset':\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return state;\n  }\n}\n\nconst FilterDrawer = props => {\n  const {\n    state,\n    dispatch\n  } = useContext(SearchContext);\n  const initialState = {\n    amenities: state.amenities || [],\n    property: state.property || [],\n    setStartDate: state.setStartDate || null,\n    setEndDate: state.setEndDate || null,\n    minPrice: parseInt(state.minPrice) || 0,\n    maxPrice: parseInt(state.maxPrice) || 100,\n    location_lat: state.location_lat || null,\n    location_lng: state.location_lng || null,\n    room: parseInt(state.room) || 0,\n    guest: parseInt(state.guest) || 0\n  };\n  const {\n    0: current,\n    1: dispatchCurrent\n  } = useReducer(serchReducer, initialState); // state for drawer\n\n  const {\n    0: toggle,\n    1: setToggle\n  } = useState(false); // Room guest state\n\n  const {\n    0: countRoom,\n    1: setRoom\n  } = useState(current.room);\n  const {\n    0: countGuest,\n    1: setGuest\n  } = useState(current.guest); // Toggle Drawer\n\n  const handleToggleDrawer = () => {\n    setToggle(!toggle);\n  }; // data handling\n\n\n  const onChange = (value, type) => {\n    let query = {};\n    let modifiedCurrent = current;\n\n    for (const key in modifiedCurrent) {\n      if (modifiedCurrent.hasOwnProperty(key)) {\n        switch (key) {\n          case 'date_range':\n            delete modifiedCurrent.date_range;\n            break;\n\n          case 'price':\n            delete modifiedCurrent.price;\n            break;\n        }\n      }\n    }\n\n    if (type === 'date_range') {\n      query = _objectSpread(_objectSpread({}, current), {}, {\n        setStartDate: value.setStartDate,\n        setEndDate: value.setEndDate\n      });\n      dispatchCurrent({\n        type: type,\n        payload: value\n      });\n    } else if (type === 'price') {\n      query = _objectSpread(_objectSpread({}, current), {}, {\n        minPrice: value ? value[0] : 0,\n        maxPrice: value ? value[1] : 100\n      });\n      dispatchCurrent({\n        type: type,\n        payload: query\n      });\n    } else if (type === 'room') {\n      query = _objectSpread(_objectSpread({}, current), {}, {\n        room: value ? value : 0\n      });\n      dispatchCurrent({\n        type: type,\n        payload: query\n      });\n    } else if (type === 'guest') {\n      query = _objectSpread(_objectSpread({}, current), {}, {\n        guest: value ? value : 0\n      });\n      dispatchCurrent({\n        type: type,\n        payload: query\n      });\n    } else if (type === 'reset') {\n      setRoom(0);\n      setGuest(0);\n      query = _objectSpread(_objectSpread({}, current), {}, {\n        setStartDate: null,\n        setEndDate: null,\n        room: 0,\n        guest: 0,\n        amenities: [],\n        property: [],\n        minPrice: 0,\n        maxPrice: 100,\n        location_lat: null,\n        location_lng: null\n      });\n      dispatchCurrent({\n        type: type,\n        payload: query\n      });\n    } else {\n      query = _objectSpread(_objectSpread({}, current), {}, {\n        [type]: value\n      });\n      dispatchCurrent({\n        type: type,\n        payload: value\n      });\n    }\n  };\n\n  const handleApplyFilter = () => {\n    const params = setStateToUrl(current);\n    dispatch({\n      type: 'UPDATE',\n      payload: _objectSpread({}, current)\n    });\n    history.push(_objectSpread(_objectSpread({}, location), {}, {\n      search: params\n    }));\n    setToggle(false);\n  };\n\n  const handleCloseDrawer = () => {\n    setRoom(0);\n    const query = {\n      setStartDate: null,\n      setEndDate: null,\n      room: 0,\n      guest: 0,\n      amenities: [],\n      property: [],\n      minPrice: 0,\n      maxPrice: 100,\n      location_lat: null,\n      location_lng: null\n    };\n    dispatchCurrent({\n      type: 'reset',\n      payload: query\n    });\n    dispatch({\n      type: 'UPDATE',\n      payload: _objectSpread(_objectSpread({}, current), query)\n    });\n    const params = setStateToUrl(query);\n    history.push(_objectSpread(_objectSpread({}, location), {}, {\n      search: params\n    }));\n    setToggle(false);\n  };\n\n  return __jsx(FilterArea, null, __jsx(_Button, {\n    className: toggle ? 'active' : '',\n    onClick: handleToggleDrawer\n  }, \"More filters\"), __jsx(_Drawer, {\n    className: \"filter_drawer\",\n    height: \"100vh\",\n    placement: \"bottom\",\n    closable: false,\n    maskClosable: false,\n    onClose: handleCloseDrawer,\n    visible: toggle,\n    maskStyle: {\n      backgroundColor: 'transparent'\n    }\n  }, __jsx(FilterElementsWrapper, null, __jsx(Accordion, {\n    allowZeroExpanded: true\n  }, __jsx(AccordionItem, null, __jsx(AccordionItemHeading, null, __jsx(AccordionItemButton, null, __jsx(Heading, {\n    as: \"h4\",\n    content: \"Amenities\"\n  }), __jsx(IoIosArrowDown, null))), __jsx(AccordionItemPanel, null, __jsx(_Checkbox.Group, {\n    options: getAmenities.options,\n    value: current.amenities,\n    onChange: value => onChange(value, 'amenities')\n  }))), __jsx(AccordionItem, null, __jsx(AccordionItemHeading, null, __jsx(AccordionItemButton, null, __jsx(Heading, {\n    as: \"h4\",\n    content: \"Property Type\"\n  }), __jsx(IoIosArrowDown, null))), __jsx(AccordionItemPanel, null, __jsx(_Checkbox.Group, {\n    options: getPropertyType.options,\n    value: current.property,\n    onChange: value => onChange(value, 'property')\n  }))), __jsx(AccordionItem, null, __jsx(AccordionItemHeading, null, __jsx(AccordionItemButton, null, __jsx(Heading, {\n    as: \"h4\",\n    content: \"Select Price Range\"\n  }), __jsx(IoIosArrowDown, null))), __jsx(AccordionItemPanel, null, __jsx(_Slider, {\n    range: true,\n    marks: priceInit,\n    min: 0,\n    max: 100,\n    defaultValue: [current.minPrice, current.maxPrice],\n    onAfterChange: value => onChange(value, 'price')\n  }))), __jsx(AccordionItem, null, __jsx(AccordionItemHeading, null, __jsx(AccordionItemButton, null, __jsx(Heading, {\n    as: \"h4\",\n    content: \"Choose Date\"\n  }), __jsx(IoIosArrowDown, null))), __jsx(AccordionItemPanel, null, __jsx(DateRangePicker, {\n    startDateId: \"startDate-id-mobile\",\n    endDateId: \"endDate-id-mobile\",\n    startDate: current.setStartDate ? moment(current.setStartDate) : null,\n    endDate: current.setEndDate ? moment(current.setEndDate) : null,\n    numberOfMonths: 1,\n    small: true,\n    item: calenderItem,\n    updateSearchData: value => onChange(value, 'date_range')\n  }))), __jsx(AccordionItem, null, __jsx(AccordionItemHeading, null, __jsx(AccordionItemButton, null, __jsx(Heading, {\n    as: \"h4\",\n    content: \"Choose Room and Guest\"\n  }), __jsx(IoIosArrowDown, null))), __jsx(AccordionItemPanel, null, __jsx(RoomGuestWrapper, null, __jsx(ItemWrapper, null, __jsx(\"strong\", null, \"Room\"), __jsx(InputIncDec, {\n    id: \"room\",\n    increment: () => {\n      setRoom(countRoom => countRoom + 1);\n      onChange(countRoom + 1, 'room');\n    },\n    decrement: () => {\n      setRoom(countRoom => countRoom > 0 && countRoom - 1);\n      onChange(countRoom => countRoom > 0 && countRoom - 1, 'room');\n    },\n    value: countRoom\n  })), __jsx(ItemWrapper, null, __jsx(\"strong\", null, \"Guest\"), __jsx(InputIncDec, {\n    id: \"guest\",\n    increment: () => {\n      setGuest(countGuest => countGuest + 1);\n      onChange(countGuest + 1, 'guest');\n    },\n    decrement: () => {\n      setGuest(countGuest => countGuest > 0 && countGuest - 1);\n      onChange(countGuest => countGuest > 0 && countGuest - 1, 'guest');\n    },\n    value: countGuest\n  })))))), __jsx(ButtonGroup, null, __jsx(_Button, {\n    onClick: handleCloseDrawer\n  }, \"Cancel Filter\"), __jsx(_Button, {\n    type: \"primary\",\n    onClick: handleApplyFilter\n  }, \"Apply Filter\")))));\n};\n\nexport default FilterDrawer;","map":null,"metadata":{},"sourceType":"module"}