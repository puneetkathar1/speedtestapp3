{"ast":null,"code":"var _s = $RefreshSig$();\n\n// Hook\nimport { useEffect } from 'react';\nexport function useOnClickOutside(ref, handler) {\n  _s();\n\n  useEffect(function () {\n    var listener = function listener(event) {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return function () {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]); // Empty array ensures that effect is only run on mount and unmount\n}\n\n_s(useOnClickOutside, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["C:/Users/Puneet/Documents/trip-main/components/UI/ViewWithPopup/useOnClickOutside.js"],"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,OAAhC,EAAyC;AAAA;;AAC9CH,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMI,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxB;AACA,UAAI,CAACH,GAAG,CAACI,OAAL,IAAgBJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACtD;AACD;;AAEDL,MAAAA,OAAO,CAACE,KAAD,CAAP;AACD,KAPD;;AASAI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,QAAvC;AACAK,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,EAAwCN,QAAxC;AAEA,WAAO,YAAM;AACXK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,QAA1C;AACAK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,YAA7B,EAA2CP,QAA3C;AACD,KAHD;AAID,GAjBQ,EAiBN,CAACF,GAAD,EAAMC,OAAN,CAjBM,CAAT,CAD8C,CAkB1B;AACrB;;GAnBeF,iB","sourcesContent":["// Hook\nimport { useEffect } from 'react';\nexport function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]); // Empty array ensures that effect is only run on mount and unmount\n}\n"]},"metadata":{},"sourceType":"module"}